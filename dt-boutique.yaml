apiVersion: apps/v1
kind: Deployment
metadata:
  name: emailservice
  labels:
    dt.owner: email-team
spec:
  replicas: 3
  selector:
    matchLabels:
      app: emailservice
  template:
    metadata:
      labels:
        app: emailservice
        dt.owner: email-team
        app.kubernetes.io/name: hipster-emailservice
        app.kubernetes.io/part-of: hipster-shop
        app.kubernetes.io/version: 3.0.1
        app.kubernetes.io/stage: production
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      containers:
      - name: server
        image: gcr.io/sales-engineering-noram/dt-boutique/emailservice:v1
        ports:
        - containerPort: 8080
        env:
        - name: PORT
          value: "8080"
        # - name: DISABLE_TRACING
        #   value: "1"
        - name: DISABLE_PROFILER
          value: "1"
        - name: "DT_RELEASE_VERSION"
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/version']
        - name: DT_RELEASE_BUILD_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/version']
        - name: "DT_RELEASE_PRODUCT"
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/part-of']
        - name: DT_RELEASE_STAGE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/stage']
        readinessProbe:
          periodSeconds: 5
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:8080"]
        livenessProbe:
          periodSeconds: 5
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:8080"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 500m
            memory: 500Mi
---
apiVersion: v1
kind: Service
metadata:
  name: emailservice
spec:
  type: ClusterIP
  selector:
    app: emailservice
  ports:
  - name: grpc
    port: 5000
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: checkoutservice
  labels:
    dt.owner: checkout-team
spec:
  replicas: 3
  selector:
    matchLabels:
      app: checkoutservice
  template:
    metadata:
      labels:
        app: checkoutservice
        dt.owner: checkout-team
        app.kubernetes.io/name: hipster-checkout
        app.kubernetes.io/part-of: hipster-shop
        app.kubernetes.io/version: 3.0.1
        app.kubernetes.io/stage: production
    spec:
      serviceAccountName: default
      containers:
        - name: server
          image: gcr.io/sales-engineering-noram/dt-boutique/checkoutservice:v1
          ports:
          - containerPort: 5050
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:5050"]
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:5050"]
          env:
          - name: PORT
            value: "5050"
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: "productcatalogservice:3550"
          - name: SHIPPING_SERVICE_ADDR
            value: "shippingservice:50051"
          - name: PAYMENT_SERVICE_ADDR
            value: "paymentservice:50051"
          - name: EMAIL_SERVICE_ADDR
            value: "emailservice:5000"
          - name: CURRENCY_SERVICE_ADDR
            value: "currencyservice:7000"
          - name: CART_SERVICE_ADDR
            value: "cartservice:7070"     
          - name: "DT_RELEASE_VERSION"
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['app.kubernetes.io/version']
          - name: DT_RELEASE_BUILD_VERSION
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['app.kubernetes.io/version']
          - name: "DT_RELEASE_PRODUCT"
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['app.kubernetes.io/part-of']
          - name: DT_RELEASE_STAGE 
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['app.kubernetes.io/stage']
          # - name: DISABLE_STATS
          #   value: "1"
          # - name: DISABLE_TRACING
          #   value: "1"
          # - name: DISABLE_PROFILER
          #   value: "1"
          # - name: JAEGER_SERVICE_ADDR
          #   value: "jaeger-collector:14268"
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
            limits:
              cpu: 300m
              memory: 500Mi
---
apiVersion: v1
kind: Service
metadata:
  name: checkoutservice
spec:
  type: ClusterIP
  selector:
    app: checkoutservice
  ports:
  - name: grpc
    port: 5050
    targetPort: 5050
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: recommendationservice
  labels:
    dt.owner: recommendations-team
spec:
  replicas: 3
  selector:
    matchLabels:
      app: recommendationservice
  template:
    metadata:
      labels:
        app: recommendationservice
        dt.owner: recomendations-team
        app.kubernetes.io/name: hipster-recommendationservice
        app.kubernetes.io/part-of: hipster-shop
        app.kubernetes.io/version: 3.0.1
        app.kubernetes.io/stage: production      
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      containers:
      - name: server
        image: gcr.io/sales-engineering-noram/dt-boutique/recommendationservice:v1
        ports:
        - containerPort: 8080
        readinessProbe:
          periodSeconds: 5
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:8080"]
        livenessProbe:
          periodSeconds: 5
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:8080"]
        env:
        - name: PORT
          value: "8080"
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: "productcatalogservice:3550"      
        - name: "DT_RELEASE_VERSION"
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/version']
        - name: DT_RELEASE_BUILD_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/version']
        - name: "DT_RELEASE_PRODUCT"
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/part-of']
        - name: DT_RELEASE_STAGE
          valueFrom:
              fieldRef:
                fieldPath: metadata.labels['app.kubernetes.io/stage']
        # - name: DISABLE_TRACING
        #   value: "1"
        # - name: DISABLE_PROFILER
        #   value: "1"
        # - name: DISABLE_DEBUGGER
        #   value: "1"
        resources:
          requests:
            cpu: 100m
            memory: 220Mi
          limits:
            cpu: 500m
            memory: 500Mi
---
apiVersion: v1
kind: Service
metadata:
  name: recommendationservice
spec:
  type: ClusterIP
  selector:
    app: recommendationservice
  ports:
  - name: grpc
    port: 8080
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    dt.owner: frontend-team
spec:
  replicas: 3
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        dt.owner: frontend-team
        app.kubernetes.io/name: hipster-frontend
        app.kubernetes.io/part-of: hipster-shop
        app.kubernetes.io/version: 3.0.1
        app.kubernetes.io/stage: production
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      serviceAccountName: default
      containers:
        - name: server
          image: gcr.io/sales-engineering-noram/dt-boutique/frontend:v1
          ports:
          - containerPort: 8080
          readinessProbe:
            initialDelaySeconds: 10
            httpGet:
              path: "/_healthz"
              port: 8080
              httpHeaders:
              - name: "Cookie"
                value: "shop_session-id=x-readiness-probe"
          livenessProbe:
            initialDelaySeconds: 10
            httpGet:
              path: "/_healthz"
              port: 8080
              httpHeaders:
              - name: "Cookie"
                value: "shop_session-id=x-liveness-probe"
          env:
          - name: PORT
            value: "8080"
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: "productcatalogservice:3550"
          - name: CURRENCY_SERVICE_ADDR
            value: "currencyservice:7000"
          - name: CART_SERVICE_ADDR
            value: "cartservice:7070"
          - name: RECOMMENDATION_SERVICE_ADDR
            value: "recommendationservice:8080"
          - name: SHIPPING_SERVICE_ADDR
            value: "shippingservice:50051"
          - name: CHECKOUT_SERVICE_ADDR
            value: "checkoutservice:5050"
          - name: AD_SERVICE_ADDR
            value: "adservice:9555"
          - name: ENV_PLATFORM
            value: "gcp"      
          - name: "DT_RELEASE_VERSION"
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['app.kubernetes.io/version']
          - name: DT_RELEASE_BUILD_VERSION
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['app.kubernetes.io/version']
          - name: "DT_RELEASE_PRODUCT"
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['app.kubernetes.io/part-of']
          - name: DT_RELEASE_STAGE
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['app.kubernetes.io/stage']
          # - name: DISABLE_TRACING
          #   value: "1"
          # - name: DISABLE_PROFILER
          #   value: "1"
          # - name: JAEGER_SERVICE_ADDR
          #   value: "jaeger-collector:14268"
          resources:
            requests:
              cpu: 200m
              memory: 100Mi
            limits:
              cpu: 500m
              memory: 500Mi
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  type: ClusterIP
  selector:
    app: frontend
  ports:
  - name: http
    port: 80
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: paymentservice
  labels:
    dt.owner: payments-team
spec:
  replicas: 3
  selector:
    matchLabels:
      app: paymentservice
  template:
    metadata:
      labels:
        app: paymentservice
        dt.owner: payments-team
        app.kubernetes.io/name: hipster-paymentservice
        app.kubernetes.io/part-of: hipster-shop
        app.kubernetes.io/version: 3.0.1
        app.kubernetes.io/stage: production
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      containers:
      - name: server
        image: gcr.io/sales-engineering-noram/dt-boutique/paymentservice:v1
        ports:
        - containerPort: 50051
        env:
        - name: PORT
          value: "50051" 
        - name: "DT_RELEASE_VERSION"
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/version']
        - name: DT_RELEASE_BUILD_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/version']
        - name: "DT_RELEASE_PRODUCT"
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/part-of']
        - name: DT_RELEASE_STAGE
          valueFrom:
              fieldRef:
                fieldPath: metadata.labels['app.kubernetes.io/stage']
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:50051"]
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:50051"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 300m
            memory: 500Mi
---
apiVersion: v1
kind: Service
metadata:
  name: paymentservice
spec:
  type: ClusterIP
  selector:
    app: paymentservice
  ports:
  - name: grpc
    port: 50051
    targetPort: 50051
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: productcatalogservice
  labels:
    dt.owner: catalog-team
spec:
  replicas: 3
  selector:
    matchLabels:
      app: productcatalogservice
  template:
    metadata:
      labels:
        app: productcatalogservice
        dt.owner: catalog-team
        app.kubernetes.io/name: hipster-productcatalogservice
        app.kubernetes.io/part-of: hipster-shop
        app.kubernetes.io/version: 3.0.1
        app.kubernetes.io/stage: production
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      containers:
      - name: server
        image: gcr.io/sales-engineering-noram/dt-boutique/productcatalogservice:v1
        ports:
        - containerPort: 3550
        env:
        - name: PORT
          value: "3550"
        - name: "DT_RELEASE_VERSION"
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/version']
        - name: DT_RELEASE_BUILD_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/version']
        - name: "DT_RELEASE_PRODUCT"
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/part-of']
        - name: DT_RELEASE_STAGE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/stage']
        # - name: DISABLE_STATS
        #   value: "1"
        # - name: DISABLE_TRACING
        #   value: "1"
        # - name: DISABLE_PROFILER
        #   value: "1"
        # - name: JAEGER_SERVICE_ADDR
        #   value: "jaeger-collector:14268"
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:3550"]
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:3550"]
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
          limits:
            cpu: 300m
            memory: 100Mi
---
apiVersion: v1
kind: Service
metadata:
  name: productcatalogservice
spec:
  type: ClusterIP
  selector:
    app: productcatalogservice
  ports:
  - name: grpc
    port: 3550
    targetPort: 3550
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cartservice
  labels:
    dt.owner: cart-team
spec:
  replicas: 3
  selector:
    matchLabels:
      app: cartservice
  template:
    metadata:
      labels:
        app: cartservice
        dt.owner: cart-team
        app.kubernetes.io/name: hipster-cartservice
        app.kubernetes.io/part-of: hipster-shop
        app.kubernetes.io/version: 3.0.1
        app.kubernetes.io/stage: production
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      containers:
      - name: server
        image: gcr.io/sales-engineering-noram/dt-boutique/cartservice:v1
        ports:
        - containerPort: 7070
        env:
        - name: REDIS_ADDR
          value: "redis-cart:6379"
        - name: "DT_RELEASE_VERSION"
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/version']
        - name: DT_RELEASE_BUILD_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/version']
        - name: "DT_RELEASE_PRODUCT"
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/part-of']
        - name: DT_RELEASE_STAGE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/stage']
        resources:
          requests:
            cpu: 200m
            memory: 64Mi
          limits:
            cpu: 500m
            memory: 500Mi
        readinessProbe:
          initialDelaySeconds: 15
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:7070", "-rpc-timeout=5s"]
        livenessProbe:
          initialDelaySeconds: 15
          periodSeconds: 10
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:7070", "-rpc-timeout=5s"]
---
apiVersion: v1
kind: Service
metadata:
  name: cartservice
spec:
  type: ClusterIP
  selector:
    app: cartservice
  ports:
  - name: grpc
    port: 7070
    targetPort: 7070
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loadgenerator
  labels:
    dt.owner: loadgen-team
spec:
  selector:
    matchLabels:
      app: loadgenerator
  replicas: 1
  template:
    metadata:
      labels:
        app: loadgenerator
        dt.owner: loadgen-team
        app.kubernetes.io/name: hipster-loadgenerator
        app.kubernetes.io/part-of: hipster-shop
        app.kubernetes.io/version: 3.0.1
        app.kubernetes.io/stage: production
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      restartPolicy: Always
      containers:
      - name: main
        image: gcr.io/sales-engineering-noram/dt-boutique/loadgenerator:v1
        env:
        - name: FRONTEND_ADDR
          value: "frontend:80"
        - name: USERS
          value: "10"
        - name: "DT_RELEASE_VERSION"
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/version']
        - name: DT_RELEASE_BUILD_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/version']
        - name: "DT_RELEASE_PRODUCT"
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/part-of']
        - name: DT_RELEASE_STAGE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/stage']
        resources:
          requests:
            cpu: 300m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: currencyservice
  labels:
    dt.owner: currency-team
spec:
  replicas: 3
  selector:
    matchLabels:
      app: currencyservice
  template:
    metadata:
      labels:
        app: currencyservice
        dt.owner: currency-team
        app.kubernetes.io/name: hipster-currencyservice
        app.kubernetes.io/part-of: hipster-shop
        app.kubernetes.io/version: 3.0.1
        app.kubernetes.io/stage: production
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      containers:
      - name: server
        image: gcr.io/sales-engineering-noram/dt-boutique/currencyservice:v1
        ports:
        - name: grpc
          containerPort: 7000
        env:
        - name: PORT
          value: "7000"
        - name: "DT_RELEASE_VERSION"
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/version']
        - name: DT_RELEASE_BUILD_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/version']
        - name: "DT_RELEASE_PRODUCT"
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/part-of']
        - name: DT_RELEASE_STAGE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/stage']
        # - name: DISABLE_TRACING
        #   value: "1"
        # - name: DISABLE_PROFILER
        #   value: "1"
        # - name: DISABLE_DEBUGGER
        #   value: "1"
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:7000"]
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:7000"]
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
          limits:
            cpu: 300m
            memory: 100Mi         
---
apiVersion: v1
kind: Service
metadata:
  name: currencyservice
spec:
  type: ClusterIP
  selector:
    app: currencyservice
  ports:
  - name: grpc
    port: 7000
    targetPort: 7000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shippingservice
  labels:
    dt.owner: logistics-team
spec:
  replicas: 3
  selector:
    matchLabels:
      app: shippingservice
  template:
    metadata:
      labels:
        app: shippingservice
        dt.owner: logistcs-team
        app.kubernetes.io/name: hipster-shippingservice
        app.kubernetes.io/part-of: hipster-shop
        app.kubernetes.io/version: 3.0.1
        app.kubernetes.io/stage: production
    spec:
      serviceAccountName: default
      containers:
      - name: server
        image: gcr.io/sales-engineering-noram/dt-boutique/shippingservice:v1
        ports:
        - containerPort: 50051
        env:
        - name: PORT
          value: "50051"
        - name: "DT_RELEASE_VERSION"
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/version']
        - name: DT_RELEASE_BUILD_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/version']
        - name: "DT_RELEASE_PRODUCT"
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/part-of']
        - name: DT_RELEASE_STAGE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/stage']
        # - name: DISABLE_STATS
        #   value: "1"
        # - name: DISABLE_TRACING
        #   value: "1"
        # - name: DISABLE_PROFILER
        #   value: "1"
        # - name: JAEGER_SERVICE_ADDR
        #   value: "jaeger-collector:14268"
        readinessProbe:
          periodSeconds: 5
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:50051"]
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:50051"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 500m
            memory: 500Mi
---
apiVersion: v1
kind: Service
metadata:
  name: shippingservice
spec:
  type: ClusterIP
  selector:
    app: shippingservice
  ports:
  - name: grpc
    port: 50051
    targetPort: 50051
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: adservice
  labels:
    dt.owner: marketing-team
spec:
  replicas: 3
  selector:
    matchLabels:
      app: adservice
  template:
    metadata:
      labels:
        app: adservice
        dt.owner: marketing-team
        app.kubernetes.io/name: hipster-adservice
        app.kubernetes.io/part-of: hipster-shop
        app.kubernetes.io/version: 3.0.1
        app.kubernetes.io/stage: production
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      containers:
      - name: server
        image: gcr.io/sales-engineering-noram/dt-boutique/adservice:v1
        ports:
        - containerPort: 9555
        env:
        - name: PORT
          value: "9555"
        - name: "DT_RELEASE_VERSION"
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/version']
        - name: DT_RELEASE_BUILD_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/version']
        - name: "DT_RELEASE_PRODUCT"
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/part-of']
        - name: DT_RELEASE_STAGE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/stage']
        # - name: DISABLE_STATS
        #   value: "1"
        # - name: DISABLE_TRACING
        #   value: "1"
        #- name: JAEGER_SERVICE_ADDR
        #  value: "jaeger-collector:14268"
        resources:
          requests:
            cpu: 200m
            memory: 100Mi
          limits:
            cpu: 300m
            memory: 500Mi
        readinessProbe:
          initialDelaySeconds: 20
          periodSeconds: 15
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:9555"]
        livenessProbe:
          initialDelaySeconds: 20
          periodSeconds: 15
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:9555"]
---
apiVersion: v1
kind: Service
metadata:
  name: adservice
spec:
  type: ClusterIP
  selector:
    app: adservice
  ports:
  - name: grpc
    port: 9555
    targetPort: 9555
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels:
    dt.owner: infrastructure-team
spec:
  selector:
    matchLabels:
      run: nginx
  replicas: 3
  template:
    metadata:
      labels:
        run: nginx
        dt.owner: infrastructure-team
        app.kubernetes.io/name: hipster-nginx
        app.kubernetes.io/part-of: hipster-webserver
        app.kubernetes.io/version: 3.0.1
        app.kubernetes.io/stage: production
    spec:
      containers:
      - name: nginx
        image: gcr.io/sales-engineering-noram/dt-boutique/frontendreverseproxy:v1
        ports:
        - containerPort: 80
        env:
          - name: "DT_RELEASE_VERSION"
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['app.kubernetes.io/version']
          - name: DT_RELEASE_BUILD_VERSION
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['app.kubernetes.io/version']
          - name: "DT_RELEASE_PRODUCT"
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['app.kubernetes.io/part-of']
          - name: DT_RELEASE_STAGE
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['app.kubernetes.io/stage']
        volumeMounts:
        - name: config-volume
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: config-volume
        configMap:
          name: nginx-conf
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  - name: https
    port: 443
    protocol: TCP
    targetPort: 80
  selector:
    run: nginx
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
data:
  main-snippet: load_module /opt/dynatrace/oneagent/agent/bin/current/linux-musl-x86-64/liboneagentnginx.so;
  nginx.conf: |
    user nginx;
    worker_processes auto;
    pid /run/nginx.pid;
    events {
     worker_connections 1024;
    }
    http {
     sendfile on;
     tcp_nopush on;
     tcp_nodelay on;
     keepalive_timeout 65;
     types_hash_max_size 2048;
     access_log on;
     include /etc/nginx/mime.types;
     default_type application/octet-stream;
     access_log /var/log/nginx/access.log;

     upstream frontend {
     server frontend:80;
     }
     server {
     listen 80;
     server_name localhost;
     location / {
     proxy_pass http://frontend;
     }
     }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-cart
  labels:
    dt.owner: database-team
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-cart
  template:
    metadata:
      labels:
        app: redis-cart
        dt.owner: database-team
        app.kubernetes.io/name: hipster-redis
        app.kubernetes.io/part-of: hipster-shop
        app.kubernetes.io/version: 3.0.1
        app.kubernetes.io/stage: production
    spec:
      containers:
      - name: redis
        image: redis:alpine
        ports:
        - containerPort: 6379
        readinessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 6379
        livenessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 6379
        volumeMounts:
        - mountPath: /data
          name: redis-data
        resources:
          requests:
            cpu: 70m
            memory: 200Mi
          limits:
            cpu: 200m 
            memory: 500Mi          
        env:
          - name: "DT_RELEASE_VERSION"
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['app.kubernetes.io/version']
          - name: DT_RELEASE_BUILD_VERSION
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['app.kubernetes.io/version']
          - name: "DT_RELEASE_PRODUCT"
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['app.kubernetes.io/part-of']
          - name: DT_RELEASE_STAGE
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['app.kubernetes.io/stage']
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: dt-boutique-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: redis-cart
spec:
  type: ClusterIP
  selector:
    app: redis-cart
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: dt-boutique-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard-rwo
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: activegate
    app.kubernetes.io/name: dynatrace-operator
    app.kubernetes.io/version: 0.7.2
  name: dynatrace-kubernetes-monitoring
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - pods
  - namespaces
  - replicationcontrollers
  - events
  - resourcequotas
  - pods/proxy
  - nodes/proxy
  - services
  - nodes/metrics
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - batch
  resources:
  - jobs
  - cronjobs
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - apps
  resources:
  - deployments
  - replicasets
  - statefulsets
  - daemonsets
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - apps.openshift.io
  resources:
  - deploymentconfigs
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - config.openshift.io
  resources:
  - clusterversions
  verbs:
  - list
  - watch
  - get
- nonResourceURLs:
  - /metrics
  - /version
  - /readyz
  - /livez
  verbs:
  - get
---
  kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: dt-boutique
  name: dynatrace-oneagent-metadata-viewer
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dynatrace-oneagent-metadata-viewer-binding
  namespace: dt-boutique
subjects:
- kind: ServiceAccount
  name: default
  apiGroup: ""
roleRef:
  kind: Role
  name: dynatrace-oneagent-metadata-viewer
  apiGroup: ""
